몽고 샤딩 
샤딩이란? 여러 컴퓨터에 데이터를 분할하는 방법. 큰 용량처리 가능
수동샤딩 / 자동샤딩 
  수동샤딩 : 일부 DB소프트웨어에서 제공(application에서 몇개의 다른 server로 접속을 관리할 때, 각각은 서로 독립적으로 취급. application은 다른 server에 다른 data를
저장하도록 하며, 적합한 server에 data를 구하도록 query한다). 클러스터환경에서 노드를 추가 또는 제거할 때, 데이터 배포나 로드 패턴이 변경되는 상황에서 유지 관리가 어려움.
  자동샤딩 : 운영 측면에서 MongoDB는 샤드 간에 데이터 밸런싱을 자동화하고 용량을 더 쉽게 추가 및 제거할 수 있습니다.
구성 배포를 도와주는 관리 플랫폼 : MongoDB Ops Manager(구조 제어) 와 MongoDB Atlas(Mongo에게 구조제어를 맡길경우)

(! 복제는 여러 서버에 데이터의 정확한 복사본을 생성하므로 모든 서버는 다른 모든 서버의 미러 이미지임을 기억하십시오. 반대로 모든 샤드에는 서로 다른 데이터 하위 집합이 포함되어 있습니다.)

mongos라는 하나 이상의 라우팅 프로세스를 실행합니다. 
mongos는 어떤 샤드에 어떤 데이터가 포함되어 있는지 알려주는 "목차"를 유지합니다. 
그림 14-1과 같이 응용 프로그램은 이 라우터에 연결하여 정상적으로 요청을 실행할 수 있습니다. 
어떤 데이터가 어느 샤드에 있는지 알고 있는 라우터는 요청을 적절한 샤드로 전달할 수 있습니다. 
요청에 대한 응답이 있으면 라우터는 응답을 수집하고 필요한 경우 병합하여 애플리케이션으로 다시 보냅니다. 
응용 프로그램이 아는 한, 그림 14-2에 나와 있는 것처럼 독립 실행형 mongod에 연결되어 있습니다.


MongoDB 분할 클러스터는 다음 구성 요소로 구성됩니다. 
샤드: 각 샤드는 샤딩된 데이터의 하위 집합을 포함합니다. 각 샤드는 복제본 세트로 배포할 수 있습니다. 
mongos: mongos는 쿼리 라우터 역할을 하여 클라이언트 애플리케이션과 샤딩된 클러스터 간의 인터페이스를 제공합니다. MongoDB 4.4부터 mongos는 지연 시간을 최소화하기 위해 헤지 읽기를 지원할 수 있습니다. 
구성 서버: 구성 서버는 클러스터에 대한 메타데이터 및 구성 설정을 저장합니다. 

$ mongo --nodb --norc 
 st = ShardingTest({
      name:"one-min-shards",
      chunkSize:1,
      shards:2,
      rs:{
        nodes:3,
        oplogSize:10
}, other:{ 
enableBalancer:true } 
}); 

Starting new replica set one-min-shards-rs0
ShardingTest starting replica set for shard: one-min-shards-rs0
ReplSetTest starting set 'one-min-shards-rs0'
ReplSetTest n is : 0
{
	"useHostName" : true,
	"oplogSize" : 10,
	"keyFile" : undefined,
	"port" : 20000,
	"replSet" : "one-min-shards-rs0",
	"dbpath" : "$set-$node",
	"useHostname" : true,
	"shardsvr" : "",
	"pathOpts" : {
		"testName" : "one-min-shards",
		"shard" : 0,
		"node" : 0,
		"set" : "one-min-shards-rs0"
	},
	"setParameter" : {
		"migrationLockAcquisitionMaxWaitMS" : 30000,
		"writePeriodicNoops" : false,
		"numInitialSyncConnectAttempts" : 60,
		"shutdownTimeoutMillisForSignaledShutdown" : 100,
		"enableDefaultWriteConcernUpdatesForInitiate" : true
	},
	"waitForConnect" : false,
	"restart" : undefined
}
ReplSetTest Starting....
Resetting db path '/data/db/one-min-shards-rs0-0'
Error: Caught std::exception of type boost::filesystem::filesystem_error: boost::filesystem::create_directory: No such file or directory: "/data/db/one-min-shards-rs0-0" :
MongoRunner.runMongod@src/mongo/shell/servers.js:912:13
ReplSetTest/this.start<@src/mongo/shell/replsettest.js:2929:20
_nodeParamToId/<@src/mongo/shell/replsettest.js:282:45
_nodeParamToSingleNode/<@src/mongo/shell/replsettest.js:301:45
ReplSetTest/this.startSetAsync@src/mongo/shell/replsettest.js:698:13
ShardingTest@src/mongo/shell/shardingtest.js:1452:53
ShardingTest@src/mongo/shell/shardingtest.js:106:16
@(shell):1:6

chunksize 옵션은 17장에서 다룹니다. 지금은 간단히 1로 설정하십시오. 여기에서 ShardingTest에 전달된 다른 옵션에 대해 name은 단순히 샤딩된 클러스터에 대한 레이블을 제공하고 shards는 클러스터가 두 개의 샤드( 이 예에서 리소스 요구 사항을 낮게 유지하기 위해 이 작업을 수행하고 rs는 각 샤드를 oplogSize가 10MiB인 3노드 복제본 세트로 정의합니다(다시 말하지만 리소스 샤드를 oplogSize가 인 3노드 복제본 세트로 유지하기 위해 10MiB(리소스 활용도를 낮게 유지하기 위해) 각 샤드에 대해 하나의 독립 실행형 mongod를 실행할 수 있지만 각 샤드를 복제본 세트로 생성하면 샤드 클러스터의 일반적인 아키텍처에 대한 더 명확한 그림을 그릴 수 있습니다. 지정된 마지막 옵션에서 클러스터가 스핀업되면 밸런서를 활성화하도록 ShardingTest에 지시합니다. 이렇게 하면 데이터가 두 샤드에 고르게 분산됩니다.

/data/db 디렉토리가 존재해야함 

MongoRunner.dataPath = '/home/your_user/data/db/' 
실행후 ShardingTest 실행 

각각 복제본 세트인 두 개의 샤드가 있는 새 클러스터를 생성합니다. 복제 세트를 구성하고 복제 프로토콜을 설정하는 데 필요한 옵션으로 각 노드를 시작합니다. 클라이언트가 독립 실행형 mongod와 통신하는 것처럼 클러스터와 어느 정도 상호 작용할 수 있도록 샤드 전반에 걸친 요청을 관리하기 위해 mongos를 시작합니다. 마지막으로 쿼리가 올바른 샤드로 전달되도록 하는 데 필요한 라우팅 테이블 정보를 유지 관리하는 구성 서버에 대한 추가 복제본 세트를 시작합니다. 샤딩의 주요 사용 사례는 데이터 세트를 분할하여 하드웨어 및 비용 제약을 해결하거나 애플리케이션에 더 나은 성능을 제공하는 것임을 기억하십시오(예: 지리적 분할). MongoDB 샤딩은 여러 측면에서 애플리케이션에 원활한 방식으로 이러한 기능을 제공합니다.

ShardingTest가 클러스터 설정을 마치면 연결할 수 있는 10개의 프로세스가 실행됩니다. 각각 3개의 노드로 구성된 2개의 복제본 세트, 3개의 노드로 구성된 1개의 구성 서버 복제본 세트, 1개의 mongo. 기본적으로 이러한 프로세스는 포트 20000에서 시작해야 합니다. 몽고s는 포트 20009에서 실행되어야 합니다. 로컬 시스템에서 실행 중인 다른 프로세스와 ShardingTest에 대한 이전 호출은 ShardingTest가 사용하는 포트에 영향을 미칠 수 있지만 클러스터 프로세스가 실행 중인 포트를 결정하는 데 너무 많은 어려움이 있습니다.


다음으로, 클러스터를 가지고 놀기 위해 몽고s에 연결합니다. 전체 클러스터가 현재 셸에 로그를 덤프하므로 두 번째 터미널 창을 열고 다른 mongo 셸을 시작합니다.
$ mongo --nodb

> db = (new Mongo("localhost:20009")).getDB("accounts") 
mongos에 연결되어 있습니다. 몽고에 요청을 전달할 수 있으며 샤드로 라우팅합니다. 샤드의 개수나 주소와 같이 샤드에 대해 전혀 알 필요가 없습니다. 샤드가 있는 한 몽고에 요청을 전달하고 적절하게 전달하도록 허용할 수 있습니다.

>for (var i=0; i<100000; i++) {   db.users.insert({"username" : "user"+i, "created_at" : new Date()}); 
}

> sh.status()
샤드, 데이터베이스 및 컬렉션에 대한 요약을 제공합니다.
--- Sharding Status ---
    sharding version: {
      "_id": 1,
      "minCompatibleVersion": 5,
      "currentVersion": 6,
      "clusterId": ObjectId("5a4f93d6bcde690005986071")
} 
shards: { 
      "_id" : "one-min-shards-rs0",
      "host" :
        "one-min-shards-rs0/MBP:20000,MBP:20001,MBP:20002",
      "state" : 1 }
    {  "_id" : "one-min-shards-rs1",
       "host" :
         "one-min-shards-rs1/MBP:20003,MBP:20004,MBP:20005",
       "state" : 1 }
    active mongoses:
      "3.6.1" : 1
    autosplit:
      Currently enabled: no
    balancer:
      Currently enabled:  no
      Currently running:  no
	Failed balancer rounds in last 5 attempts: 0 Migration Results for the last 24 hours: 
        No recent migrations
    databases:
{ "_id" : "accounts", "primary" : "one-min-shards-rs1", "partitioned" : false } 
{ "_id" : "config", "primary" : "config", "partitioned" : true } 
config.system.sessions shardkey:{"_id":1} unique: false balancing: true 
chunks: one-min-shards-rs0 1 {"_id":{"$minKey":1}}-->>{"_id":{"$maxKey":1}} on : one-min-shards-rs0 Timestamp(1, 0) 

기본 샤드는 각 데이터베이스에 대해 무작위로 선택되는 "기본" 샤드입니다. 모든 데이터는 이 기본 샤드에 있습니다. 
기본 샤드는 샤드를 구성하는 전체 복제본 세트를 나타냅니다.
MongoDB 3.6부터 샤드는 중복성과 고가용성을 제공하기 위해 복제본 세트로 배포되어야 합니다.
MongoDB는 데이터 배포 방법(또는 배포 여부)을 모르기 때문에 아직 데이터를 자동으로 배포할 수 없습니다. 컬렉션별로 데이터를 배포하는 방법을 알려야 합니다.
> sh.enableSharding("accounts") 
컬렉션을 샤딩할 때 샤드 키를 선택합니다. 이것은 MongoDB가 데이터를 분할하는 데 사용하는 한두 개의 필드입니다. 예를 들어, "username"에서 샤딩을 선택하면 MongoDB는 데이터를 "a1-steak-sauce"에서 "defcon", "defcon1"에서 "howie1998" 등의 사용자 이름 범위로 나눕니다. 샤드 키를 선택하는 것은 컬렉션의 데이터에 대한 순서를 선택하는 것으로 생각할 수 있습니다. 이것은 인덱싱과 유사한 개념이며, 그럴만한 이유가 있습니다. 샤드 키는 컬렉션이 커질수록 컬렉션에서 가장 중요한 인덱스가 됩니다. 샤드 키를 생성하려면 필드를 인덱싱해야 합니다

> db.users.createIndex({"username" : 1}) 

 > sh.shardCollection("accounts.users", {"username" : 1})
몇 분기다렷따가 
> sh.status()
--- Sharding Status ---
    sharding version: {
      "_id" : 1,
      "minCompatibleVersion" : 5,
      "currentVersion" : 6,
      "clusterId" : ObjectId("5a4f93d6bcde690005986071")
} 
    shards:
      {  "_id" : "one-min-shards-rs0",
         "host" :
           "one-min-shards-rs0/MBP:20000,MBP:20001,MBP:20002",
         "state" : 1 }
      {  "_id" : "one-min-shards-rs1",
         "host" :
           "one-min-shards-rs1/MBP:20003,MBP:20004,MBP:20005",
         "state" : 1 }
    active mongoses:
      "3.6.1" : 1
    autosplit:
      Currently enabled: no
    balancer:
Currently enabled: yes Currently running: no Failed balancer rounds in last 5 attempts: 0 Migration Results for the last 24 hours: 
        6 : Success
    databases:
{ "_id" : "accounts", "primary" : "one-min-shards-rs1", "partitioned" : true } 
    accounts.users
shard key: { "username" : 1 } unique: false balancing: true chunks: 
        one-min-shards-rs0  6
        one-min-shards-rs1  7
        { "username" : { "$minKey" : 1 } } -->>
          { "username" : "user17256" } on : one-min-shards-rs0 Timestamp(2, 0)
        { "username" : "user17256" } -->>
          { "username" : "user24515" } on : one-min-shards-rs0 Timestamp(3, 0)
        { "username" : "user24515" } -->>
          { "username" : "user31775" } on : one-min-shards-rs0 Timestamp(4, 0)
        { "username" : "user31775" } -->>
          { "username" : "user39034" } on : one-min-shards-rs0 Timestamp(5, 0)
        { "username" : "user39034" } -->>
          { "username" : "user46294" } on : one-min-shards-rs0 Timestamp(6, 0)
        { "username" : "user46294" } -->>
          { "username" : "user53553" } on : one-min-shards-rs0 Timestamp(7, 0)
        { "username" : "user53553" } -->>
          { "username" : "user60812" } on : one-min-shards-rs1 Timestamp(7, 1)
        { "username" : "user60812" } -->>
          { "username" : "user68072" } on : one-min-shards-rs1 Timestamp(1, 7)
        { "username" : "user68072" } -->>
          { "username" : "user75331" } on : one-min-shards-rs1 Timestamp(1, 8)
        { "username" : "user75331" } -->>
          { "username" : "user82591" } on : one-min-shards-rs1 Timestamp(1, 9)
        { "username" : "user82591" } -->>
          { "username" : "user89851" } on : one-min-shards-rs1 Timestamp(1, 10)
        { "username" : "user89851" } -->>
          { "username" : "user9711" } on : one-min-shards-rs1 Timestamp(1, 11)
        { "username" : "user9711" } -->>
{ "username" : { "$maxKey" : 1 } } on : one-min-shards-rs1 Timestamp(1, 12) { "_id" : "config", "primary" : "config", "partitioned" : true } 
config.system.sessions shardkey:{"_id":1} unique: false balancing: true 
chunks: one-min-shards-rs0 1 {"_id":{"$minKey":1}}-->> 
          { "_id" : { "$maxKey" : 1 } } on : one-min-shards-rs0 Timestamp(1, 0)

컬렉션은 13개의 청크로 분할되었으며 각 청크는 데이터의 하위 집합입니다. 이것들은 샤드 키 범위로 나열됩니다({"username" : minValue} -->> {"username" : maxValue}는 각 청크의 범위를 나타냄). 출력의 "on" : 샤드 부분을 보면 이러한 청크가 샤드 간에 고르게 분포되어 있음을 알 수 있습니다.

샤딩 전에 컬렉션은 기본적으로 단일 청크입니다.

청크 목록의 시작과 끝에 있는 키($minKey 및 $maxKey)를 확인하십시오. $minKey는 "음의 무한대"로 생각할 수 있습니다. MongoDB의 다른 어떤 값보다 작습니다. 유사하게, $maxKey는 "양의 무한대"와 같습니다. 다른 어떤 값보다 큽니다. 따라서 청크 범위에서 항상 이것을 "캡"으로 볼 수 있습니다. 샤드 키의 값은 항상 $minKey와 $maxKey 사이입니다. 이러한 값은 실제로 BSON 유형이며 애플리케이션에서 사용해서는 안 됩니다. 주로 내부용입니다. 쉘에서 참조하려면 MinKey 및 MaxKey 상수를 사용하십시오

캡?? CAP 이론은 2000년에 에릭 브류어가 최초로 소개한 이론이며 어떤 분산 시스템이더라도 Consistency (일관성), Availability (가용성), Partition tolerance (분할 내성)를 모두 만족할 수 없다는 이론이다. 이 세 가지의 머리 글자를 따서 CAP 이론이라고 부른다.
Consistency는 모든 노드가 같은 시간에 같은 데이터를 볼 수 있다는 의미를 지닌다. 즉 데이터가 업데이트된 후 다른 노드에 동기화되어 모든 사용자가 최신 데이터를 본다면 일관성이 있는 시스템이다. 이를 위해선 동기화가 되는 동안 유저는 대기해야한다. 대기 시간이 길어질 경우 가용성이 떨어지는 시스템이다.
Availability는 모든 요청에 성공 혹은 실패 결과를 반환 할 수 있다는 의미를 지닌다. 하나의 노드가 망가져도 다른 노드를 통해 데이터를 제공할 수 있다면 가용성이 있는 시스템이다. 만약 다시 노드가 살아났을 때 다른 노드와 데이터가 다르다면 일관성이 떨어지는 시스템이다.
Partition tolerance는 통신에 실패해도 시스템이 계속 동작해야한다는 의미를 지닌다. 노드가 망가진 것이 아닌 노드를 연결시켜주는 네트워크가 고장나는 경우를 의미한다. 둘 사이 통신이 망가져서 동기화가 불가능해진다면 일관성이 떨어진다. 만약 통신이 복구되고 동기화되는 것을 기다린다면 가용성이 떨어진다. 결국 둘 다 만족할 수 없다.

이제 데이터가 여러 샤드에 분산되었으므로 몇 가지 쿼리를 수행해 보겠습니다. 먼저 특정 사용자 이름에 대해 쿼리를 시도합니다.
 > db.users.find({username: "user12345"})
> db.users.find({username: "user12345"}}).explain()
{
      "queryPlanner" : {
        "mongosPlannerVersion" : 1,
        "winningPlan" : {
          "stage" : "SINGLE_SHARD",
          "shards" : [{
        "shardName" : "one-min-shards-rs0",
        "connectionString" :
          "one-min-shards-rs0/MBP:20000,MBP:20001,MBP:20002",
        "serverInfo" : {
            "host" : "MBP",
            "port" : 20000,
          "version" : "3.6.1",
          "gitVersion" : "025d4f4fe61efd1fb6f0005be20cb45a004093d1"
}, "plannerVersion" : 1, "namespace" : "accounts.users", "indexFilterSet" : false, "parsedQuery" : { 
            "username" : {
             "$eq" : "user12345"
} }, 
        "winningPlan" : {
          "stage" : "FETCH",
          "inputStage" : {
            "stage" : "SHARDING_FILTER",
              "inputStage" : {
                  "stage" : "IXSCAN",
              "keyPattern" : {
                "username" : 1
              },
"indexName" : "username_1", "isMultiKey" : false, "multiKeyPaths" : { 
                    "username" : [ ]
              },
"isUnique" : false, "isSparse" : false, 
"isPartial" : false, "indexVersion" : 2, "direction" : "forward", "indexBounds" : { 
                "username" : [
                      "[\"user12345\", \"user12345\"]"
] } 
} } 
        },
        "rejectedPlans" : [ ]
}] } 
      },
      "ok" : 1,
      "$clusterTime" : {
        "clusterTime" : Timestamp(1515174248, 1),
        "signature" : {
          "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
          "keyId" : NumberLong(0)
        }
}, 
      "operationTime" : Timestamp(1515173700, 201)
    }
Explain 출력의 "winingPlan" 필드에서 클러스터가 단일 샤드인 one-min-shards-rs0을 사용하여 이 쿼리를 충족했음을 알 수 있습니다. 이전에 표시된 sh.status()의 출력을 기반으로 user12345가 클러스터의 해당 샤드에 대해 나열된 첫 번째 청크의 키 범위에 속한다는 것을 알 수 있습니다.
"username"이 샤드 키이기 때문에 mongos는 쿼리를 올바른 샤드로 직접 라우팅할 수 있었습니다.

> db.users.find().explain()
{
      "queryPlanner":{
        "mongosPlannerVersion":1,
        "winningPlan":{
          "stage":"SHARD_MERGE",
          "shards":[
            {
              "shardName":"one-min-shards-rs0",
              "connectionString":
                "one-min-shards-rs0/MBP:20000,MBP:20001,MBP:20002",
              "serverInfo":{
                "host":"MBP.fios-router.home",
                "port":20000,
                "version":"3.6.1",
                "gitVersion":"025d4f4fe61efd1fb6f0005be20cb45a004093d1"
}, "plannerVersion":1, "namespace":"accounts.users", "indexFilterSet":false, "parsedQuery":{ 
              },
              "winningPlan":{
            "stage":"SHARDING_FILTER",
            "inputStage":{
              "stage":"COLLSCAN",
              "direction":"forward"
            }
          },
          "rejectedPlans":[
] }, 
        {
          "shardName":"one-min-shards-rs1",
          "connectionString":
            "one-min-shards-rs1/MBP:20003,MBP:20004,MBP:20005",
          "serverInfo":{
            "host":"MBP.fios-router.home",
            "port":20003,
            "version":"3.6.1",
            "gitVersion":"025d4f4fe61efd1fb6f0005be20cb45a004093d1"
}, "plannerVersion":1, "namespace":"accounts.users", "indexFilterSet":false, "parsedQuery":{ 
          },
          "winningPlan":{
            "stage":"SHARDING_FILTER",
            "inputStage":{
              "stage":"COLLSCAN",
              "direction":"forward"
            }
          },
          "rejectedPlans":[
] } 
] } 
  },
  "ok":1,
  "$clusterTime":{
    "clusterTime":Timestamp(1515174893, 1),
    "signature":{
      "hash":BinData(0, "AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
      "keyId":NumberLong(0)
    }
}, 
  "operationTime":Timestamp(1515173709, 514)
}


이 설명에서 알 수 있듯이 이 쿼리는 모든 데이터를 찾기 위해 두 샤드를 모두 방문해야 합니다. 일반적으로 쿼리에서 샤드 키를 사용하지 않는 경우 mongos는 쿼리를 모든 샤드에 보내야 합니다.
분할 키를 포함하고 단일 분할 또는 분할 하위 집합으로 보낼 수 있는 쿼리를 대상 쿼리라고 합니다. 모든 샤드에 보내야 하는 쿼리를 분산 수집(브로드캐스트) 쿼리라고 합니다. mongos는 쿼리를 모든 샤드에 분산한 다음 결과를 수집합니다.
실험이 끝나면 세트를 종료하십시오. 원래 셸로 다시 전환하고 Enter 키를 몇 번 눌러 명령줄로 돌아간 다음 st.stop()을 실행하여 모든 서버를 완전히 종료합니다.
 


