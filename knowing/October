10월 07일 
 junit @Parameterized 사용 예시 : https://www.baeldung.com/parameterized-tests-junit-5

10월 29일
 DNS TTL : 클라이언트가 DNS서버로 요청 후 일정시간만큼 도메인-IP에 대한 정보를 가지고 있게하여 재요청을 막게함. 이때의 시간.
 서비스 디스커버리 : 서비스의 주소, 프로토콜, 포트 등을 알려주는 방법 
 로드발란스: 부하를 어떻게 나눌것인가
 서비스 디스커버리 : 어떤서비스가 있고 해당 서비스에 어떤 서버나 endpoints가 있는가를 찾는것
 서버들의 ip목록을 가지고 있을경우 서버증설과 변경에 따른 실시간 대처가 어려움 
 -> DNS서버를 사용하면 DNS를 업데이트하는 방법(쿼리문실행)문제와 DNS TTL동안 변경되지 문제에 직면 
 -> 로드발란스가 없는 상황에서도 서버증설/삭제에 어려움발생 
 -> 서비스 디스커버리 필요! 
 원리 : 클라이언트 <->서비스 디스커버리 : 서버의 목록을 받음. 
       서비스 디스커버리 <-> 서버 : 추가시 등록요청. 디스커버리가 health체크로 서버 생존유무 확인. 
 디스커버리를 도와주는 툴 = 코디네이터 : zookeeper , etcd, consul, eureka
   디스커버리에서 콜러가 콜리의 주소를 코디네이터를 통해 계속 동적으로 업데이트 받음
 코디네이터 특징 : 3대이상의 동기화. 대쉬보드 역할(noti, watch) -> 노드 순서보장 
 클러스터멤버십 구현 가능 -> 서버의 추가/삭제를 제어하여 관리하는것. 
 leader election : 헬스체크시 여러대가 1개의 api에 대해 헬스체크를 할때 동시에 진행할경우 noti가 헬스체크서버 만큼오기때문에 1대만 leader를 두고 leader가 죽으면 다시 선출. 
    -> 분산 lock 
 리더선정방식 : zookeeper - 우선순위 목록관리, etcd - 특정키를 가장 먼저 획득한 서버 
 변화감지 Watcher : redis의 pub/sub(공지,구독)알림방법, spring cloud config의 rest api 제공(값을 가져가라고 알림을 줌) 방법
 feature flag(=feature toggle) : flag를 켜주면(값이 바뀌면) 배포된 기능이 실행됨. flag를 킨경우, 안킨경우 2가지에 대응 해야함.
